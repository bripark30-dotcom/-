import streamlit as st
import pandas as pd

# --------------------------------------------------------------------------
# 1. 장학금 데이터베이스 생성 (학년 정보 통일)
# --------------------------------------------------------------------------
def create_scholarship_df():
    """
    장학금 데이터를 pandas DataFrame으로 생성하는 함수
    """
    # '학년 정보'를 '신입생(1학년)'과 '재학생(2학년 이상)'으로 통일하여 재구성
    data = [
        {'장학금명': 'AI서울테크 대학원 장학금', '구분': '대학원생', '학년 정보': '대학원 재학생', '전공 계열': '이공계 및 자연과학', '필수 조건': '해당 없음', '경제상황 요건': '해당 없음'},
        
        # 대학생 장학금
        {'장학금명': '서울희망 대학진로 장학금', '구분': '대학생', '학년 정보': '신입생(1학년), 재학생(2학년 이상)', '전공 계열': '전공무관', '필수 조건': '해당 없음', '경제상황 요건': '기초생활수급자/법정차상위계층, 학자금지원 4구간 이내'},
        {'장학금명': '서울희망 공익인재 장학금', '구분': '대학생', '학년 정보': '재학생(2학년 이상)', '전공 계열': '전공무관', '필수 조건': '사회공헌활동 경험자', '경제상황 요건': '해당 없음'},
        {'장학금명': '독립유공자 후손 장학금', '구분': '대학생', '학년 정보': '신입생(1학년), 재학생(2학년 이상)', '전공 계열': '전공무관', '필수 조건': '독립유공자 후손 (4~6대)', '경제상황 요건': '해당 없음'},
        {'장학금명': '서울 해외교환학생 장학금', '구분': '대학생', '학년 정보': '재학생(2학년 이상)', '전공 계열': '전공무관', '필수 조건': '해외교환학생으로 선발된 자', '경제상황 요건': '기초생활수급자/법정차상위계층, 학자금지원 4구간 이내'},
        {'장학금명': '청춘Start 장학금', '구분': '대학생', '학년 정보': '신입생(1학년)', '전공 계열': '전공무관', '필수 조건': '해당 없음', '경제상황 요건': '기초생활수급자/법정차상위계층, 아동복지시설 퇴소자'},
        
        # 고등학생 장학금
        {'장학금명': '서울희망 직업전문학교 장학금', '구분': '고등학생', '학년 정보': '직업전문학교 재학생', '전공 계열': '해당 없음', '필수 조건': '해당 없음', '경제상황 요건': '기초생활수급자/법정차상위계층'},
        {'장학금명': '서울희망고교진로 장학금', '구분': '고등학생', '학년 정보': '고등학교 재학생', '전공 계열': '해당 없음', '필수 조건': '해당 없음', '경제상황 요건': '기초생활수급자, 차상위계층, 북한이탈주민, 경제사각지대'},
        {'장학금명': '서울희망 예체능 장학금', '구분': '고등학생', '학년 정보': '고등학교 재학생', '전공 계열': '예체능', '필수 조건': '예체능 특기자', '경제상황 요건': '기초생활수급자/법정차상위계층, 학교장 추천 받은 학생'},
        {'장학금명': '서울꿈길장학금', '구분': '고등학생', '학년 정보': '비인가 대안교육기관 재학 청소년', '전공 계열': '해당 없음', '필수 조건': '학교장 추천', '경제상황 요건': '기초생활수급자/법정차상위계층, 학교장 추천'}
    ]
    return pd.DataFrame(data)

# --------------------------------------------------------------------------
# 2. 결과 출력 함수
# --------------------------------------------------------------------------
def display_results(result_df):
    """결과를 스트림릿 화면에 예쁘게 출력하는 함수"""
    st.subheader("🏆 추천 장학금 결과")
    if result_df.empty:
        st.info("✅ 아쉽지만 현재 조건에 맞는 장학금이 없습니다.")
    else:
        st.success(f"총 {len(result
